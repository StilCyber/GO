************************************************************************
// Порядок установки

Начинаем с классики

    sudo apt update
    sudo apt upgrade

Инсталлируем postgres

    sudo apt install postgresql

Запускаем postgres (утилита systemctl управляет демонами линукса)

    sudo systemctl start postgresql

    ... и проверяем статус демона (должен быть зеленым)
    sudo systemctl status postgresql

    для рестарта (к примеру, при изменении конфигов) демона нужно пнуть 
    sudo systemctl restart postgresql

************************************************************************
// Заходим в пострес 

В постгресе есть свои отдельные пользователи, после установки доступен суперпользователь "postgres", который обладает неограниченными возможностями (что хочет создает, что хочет удаляет)
Для работы с постгресом из терминала используется отдельная консоль - psql. По сути это отдельный терминал, в котором можно вводить команды для работы с постгресом
Можно войти в аккаунт постгреса без входа в консоль psql, но в этом смысла особо нет. Для этого можно использовать следующую команду: sudo -i -u postgres 
Дело в том, что пользователи постгреса связаны с пользователями линукс. Поэтому, при установке пострес создается не только суперпользователь постгрес, но и одноименный аккаунт в операционной системе. 
И здесь нас ждет подстава - по умолчанию для пользователя postgres не задан пароль, поэтому нормально пользоваться им мы пока не сможет, но об этом чуть позже. 
Если вы все же ввели sudo -i -u postgres и не можете оттуда выйти, введите команду: su myAccount, где myAccount - имя вашего основного аккаунта в линуксе, от которого вы знаете пароль - введите этот пароль и возвращаетесь обратно

Для того, чтобы выбрать пользователя посгрес и сразу открыть psql, нужно ввести следующую команду: sudo -u postgres psql
Здесь мы заходим в аккаунт postgres в операционной системе и через него вызываем терминал psql 
Выйти из консоли psql можно командой \q 

Итак, заходит в psql под пользователем postgres (должны увидеть вот такое: postgres=#)
Создаем базу данных с рандомным именем: CREATE DATABASE test; Здесь CREATE DATABASE - оператор создания базы данных, test - собственно название базы данных. 
Для имен БД есть свои правила, так что если введете что-то не так, вам сообщат. Самое основное - нельзя пользоваться дефисами
Если введете CREATE DATABASE test-1; то получите вот такую хрень 
ERROR:  syntax error at or near "-"
LINE 1: CREATE DATABASE test-1;

Чтобы посмотреть список баз данных всех пользователей можно воспользоваться командой \l (или полный вариант \list, без разницы). Чтобы выйти оттуда жмем q

Чтобы посмотреть всех пользователей постгрес, набираем вот такое вот: \du

Создаем таблицу: CREATE TABLE mytable();
Чтобы посмотреть таблицы, имеющиеся в БД, набираем \dt

Теперь разбираемся с подставой с паролем. Для адекватной работы пользователю постгрес нужно задать пароль, по умолчанию у суперюзера postgres его нет, что, в частности, "затрудняет" подключение к БД из редактора кода. 
Нужна следующая команда: ALTER USER postgres WITH PASSWORD 'postgres';
Здесь для пользователя postgres задается пароль 'postgres'

По причине наличия минтайной связи между пользователями постреса и аккаунтами линукса крайне рекомендуется использовать идентичные имена. 
К примеру, создать аккаунт в линуксе с логином karnozavr666 и аккаунт посгрес с логином karnozavr666 (не забываем про пароль) и заходить сразу через него

//Шпаргалка:
Вход в консоль: sudo -u postgres psql
Выход из консоли: \q
Показать всех пользователей: \du
Показать все базы данных: \l
Зайти в базу данных: \c nameDB
Показать таблицы в базе данных: \dt

************************************************************************
// При работе с postgres помним два важных правила:
1. Операторы пишутся капсом (да, это выглядит как абьюз)
2. В конце инструкций всегда нужно ставить точку с запятой (иначе не заработает) - ; 

 P.S. Оператор - это некий набор символов (слово или несколько слов), на первый вид бессвязный, который говорит постресу что мы вообще от него хотим (SELECT, FROM, WHERE, JOIN и др.). Операторы заранее предустановлены разработчиками постгреса.
      Между операторами есть данные, с которыми мы работаем - это операнды. 

 P.S.S. Инструкция - строка кода, которая делает что-то осмысленное (в идеале).

 Пример: вот так выглядит поиск всех строк в столбце name в таблице users: SELECT name FROM users; (это одна инструкция, где SELECT и FROM - операторы, name и users - операнды, точка с запятой означает конец инструкции)

************************************************************************
Подключение postgres в VS CODE

Ставим расширение PostgreSQL (автор Chris Kolkman, там сейчас порядка миллиона скачиваний)
После этого в левой верхней части редактора появится кружка со слоном
Жмякаем на кружку, и затем на плюсик который появится. 
В верхней части редактора откроется небольшое окошко, в котором будет любезно предложено совершить 7 осмысленных действий по порядку:
1. Указать IP адрес хозяина (хоста). При открытии БД, развернутой локально, нужно прописать localhost - 127.0.0.1
2. Ввести пользователя postgres
3. Ввести пароль для этого пользователя
4. Ввести порт, на котором крутится postgres (если вы не лазили в конфигах, то по умолчанию это будет 5432)
5. Указать Standard Connection
6. Выбрать из предложенного списка БД (если выбора нет, то расширение не может подключиться к постгресу)
7. Придумать любое на ваш выбор имя, которое будет отображаться для помойки, которую вы открываете

Скипнуть окошечко можно на любом шаге на клавишу Esc

************************************************************************
Основные действия при работе с postgres
В целях наглядности здесь и далее мы займемся анализом вечно зеленой темы - отношалок. Создадим БД, которая будет отражать отношения между людьми. 
/////

Создание базы данных 
CREATE DATABASE relationship;
Здесь CREATE DATABASE указывает на создание базы данных, relationship - собственно ее название. Вроде, все очевидно.

Создаем первую таблицу, но перед этим немного поговорим о типах данных. 
В постгрес есть разные типы данных, самые распространенные из них следующие:
VARCHAR(255) - строка длиной в определенное количество символов, число которых указывается в скобках
TEXT - строка большой длины 
INT - целые числа
BOOL- true или false

Почитать подробней о типах данных можно вот здесь: https://neon.tech/postgresql/postgresql-tutorial/postgresql-data-types

Создание таблицы (перед этим не забываем коннектиться к нашей БД)
relationship=# CREATE TABLE women(
relationship(# id SERIAL PRIMARY KEY,
relationship(# name VARCHAR(255),
relationship(# husband BOOL,
relationship(# children BOOL,
relationship(# lovers BOOL
relationship(# );

Все указанное выше - одна инструкция, ее можно прописывать в несколько строк для удобства, главное не ошибиться по пути. 

Для каждой сущности нам нужен уникальный идентификатор, как правило, это отдельный айдишник (по сути это искусственная колонка). Однако, в качестве идентификатора можно использовать другое значение, если мы на 100% уверены что оно будет уникальным.
Если бы женщины в таблице были бы астрологами или представителями какой-либо другой древней профессии, то в качестве идентификатора можно было бы использовать номер заказа. 
Здесь для сущности женщина используется id с указанием SERIAL PRIMARY KEY. Отличение идентификатора от первичного ключа в том, что первичный ключ может быть только один в таблице, тогда как идентификаторов может быть несколько. 

Проверим, что мы насоздавали (\dt)

         List of relations
 Schema | Name  | Type  |  Owner   
--------+-------+-------+----------
 public | women | table | postgres
(1 row)

Должен получиться вот такой вывод в консоль (да, инфу в консоли можно сверстать чтобы красиво выглядело, спасибо разрабам посгреса)

Чтобы вывести саму таблицу, пишем: \d women

                                    Table "public.women"
  Column  |          Type          | Collation | Nullable |              Default              
----------+------------------------+-----------+----------+-----------------------------------
 id       | integer                |           | not null | nextval('women_id_seq'::regclass)
 name     | character varying(255) |           |          | 
 husband  | boolean                |           |          | 
 children | boolean                |           |          | 
 lovers   | boolean                |           |          | 
Indexes:
    "women_pkey" PRIMARY KEY, btree (id)


/////
Базовый поиск 

SELECT * FROM users;

Оператор SELECT указывает на операцию поиска, FROM - говорит, в какой таблице искать, * - найти все что есть (неоптимально, т.к. при добавлении новых данных результат будет меняться)

SELECT name FROM users; 


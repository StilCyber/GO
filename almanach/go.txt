Базовый практический курс по языку GO (попутно семейное право узнаете)

************************************************************************
Установка языка

Актуальный порядок установки вот здесь (на этой же странице зеленая кнопка Download)
https://go.dev/doc/install

Windows 
Виндузятники просто скачивают пакет, затем два клика левой клавишей, и следуем инструкциям установщика

Проверяем версию go в командной строке: 
go version

Linux
Для линуксоидов все хитрее 

Открываем терминал в папке, куда был скачен пакет, и говорим что нужно распаковать и поставить:
sudo tar -C /usr/local -xzf go1.23.5.linux-amd64.tar.gz

Добавляем путь к go в переменные окружения:
export PATH=$PATH:/usr/local/go/bin

Проверяем все ли в порядке:
go version

Теминал должен выплюнуть примерно такую строку:
go version go1.23.5 linux/amd64


Mac
Если вы фанат оси, то в объяснениях вы вряд ли нуждаетесь

************************************************************************
VS CODE и первая программа 

В качестве редактора кода можно разные варианты использовать, но goland платный, а ломаные версии не факт что стабильно отработают
Поэтому устанавливаем VS CODE и расширение в нем для GO авторства Go Team at Google. Да-да, гугл не только сляпал язык, но еще и любезно предоставил штуковины, которая подружит его с VS CODE

Теперь создаем папку с именем, к примеру, projectGo, и внутри нее файл main.go 
Помещаем туда следующий код: 

////////////

package main 

import "fmt"

func main() {
    fmt.Println("I am GO! Ha-ha")
}

////////////

Косые черточки сверху и снизу просто отделяют код от другого текста, не копируем их (^_^)

Сейчас IDE будет ругаться на слово main, т.к. работа с пакетами возможна только внутри модуля
Чтобы создать модуль, нужно открыть терминал в папке проекта, и ввести следующую команду:
go mod init projectGo 

Здесь projectGo - название вашей папки, в которую вы поместили main.go 
После этого должен сгенерироваться файл go.mod 

Теперь можно запустить код:
go run main.go

В консоли появится строчка "I am GO! Ha-ha"

Теперь разбираем, что происходит 

Проект на GO может состоять из большого числа папок и файлов, и чтобы все работало корректно есть одна точка входа - это функция main 
Функция main может быть только одна на весь проект, ее не нужно отдельно вызывать

go run main.go - разберем подробней
go - утилита go
run - команда которая есть в этой утилите, говорит что нужно запустить файлов
main.go - указание на конкретный исполняемый файл 

package main - внешне код внутри проекта выглядит как папки с файлами, но логическая структура кода (как организованы связи) складывается из модулей и пакетов (об этом еще поговорим)
   Как правило, проект является отдельным модулем (в следующих разделах мы создадим такой модуль), состоящим из пакетов.
   package - означает пакет, main - название пакета. Наличие пакета main обязательно, это главный пакет. 

import "fmt" - слово import означает, что мы подключаем другой пакет, в данном случае - пакет fmt, который предоставляем функционал по выводу информации

func - слово, которое означает, что мы имеем дело с функцией 
func main() {} - сама функция с названием main, в круглых скобках функции () указываются параметры - это данные, которые мы ей скармливаем, в фигурных скобках {} - тело функции, т.е. ее код
   В функции main параметры не передаются

fmt.Println("I am the GO! Ha-ha") - мы обращаемся к пакету fmt, берем из него функцию Prinln, которая выводит что-то в консоль, и засовываем туда строку "I am the GO! Ha-ha"

Как можно догадаться, пакет fmt где-то существует, раз мы можем его использовать - это один из встроенных пакетов, 
   когда инсталлировали go, создалась отдельная папка с его файлами, где есть в том числе и разные готовые пакеты

Теперь про одно из базовых понятий - переменные
Если спросить у гугла что это такое, то он скажем примерно следующее: "область памяти, где хранятся данные"
Когда программа работает, в этой движухе задействованы разные данные (к примеру, строка "I am GO! Ha-ha" из предыдущего примера)
Данные помещаются в оперативную память компьютера
Достаточно распространенная аналогия - переменная это как коробка с вашим барахлом 
Для того чтобы работать с данными для начала нужно создать коробку и заполнить ее всякой всячиной 

Переменные в go можно создавать разными способами, начнем с основного с использованием ключевого слова var 

Допустим, мы хотим хранить имя жены:

var wife string 
wife = "Некая тян"

Здесь произошло следующее:
1. Объявление переменной - создание той самой коробочки (ключевое слово var, затем имя переменной wife, затем тип переменной - string, т.е. строка)
2. Инициализация переменной - первоначальное заполнение барахлом, в данном случае обозначением жены

И здесь немного казуистики 
Объявить переменную можно одновременно с ее инициализацией:
var wife = "Некая тян"

Однако, если мы просто объявим переменную, она все равно под капотом заполнится дефолтным значением в зависимости от типа данных - для string это будет пустая строка
Но это не инициализация, не путайте. Это другое...

Задается значение переменной с использованием оператора присваивания (=). Когда мы задаем значение в первый раз, это инициализация - дальше ну... вы понимаете 

Обратите внимание на поток выполнения кода в примере ниже. Базово, он идет последовательно сверху вниз

//////////////

func main() {
	var wife = "Некая тян"
	fmt.Println(wife)

	wife = "Кисуля"
	fmt.Println(wife)
}

//////////////

В результате выполнения мы получим следующее:
Некая тян
Кисуля

После того, как мы изменили значение переменной, в консоль во второй раз вывелся уже новый результат

Имена переменных менять нельзя, значения можно
Нужно отдельно выделить такой вид переменных, как константы, их значение устанавливается только один раз и попытка его изменить вызовет ошибку
Константы инициализируются сразу же при объявлении (логично же ведь)
Представим, что другой жены не будет:

////////////

func main() {
	const wife = "Кисуля"
	fmt.Println(wife)
}

////////////

Теперь поговорим о таком явлении, как "затенение" переменных 
Переменные имеют области видимости - если говорить прям совсем просто, то переменные, объявленные внутри функции, существуют только в ней самой. Позже мы к этому еще вернемся (наверное...)

Некоторые замечания:
- go признает только двойные кавычки
- если объявили переменную, нужно обязательно где-то ее использовать, иначе код тупо не запустится

ЗАДАНИЕ:
1.1 У супругов в браке есть ряд прав и обязанностей, но они, в кавычках, равны. 
    Прочитайте ч.1 ст. 31 Семейного кодекса РФ и выведите ее в консоль 

    Закон не ограничивает супругов в выборе своих занятий и места жительства
    То есть, никто не может запретить жене не ночевать дома и ходить по клубам, 
       в то время как ее муж может шпилиться в танки 

    Занесите текст ч.1. ст. 31 в переменную и скормите эту переменную функции Println

1.2 


Аллокатор - отдельная сущность, которая отвечает за распределение памяти 
Планировщик go не любит системные вызовы (сисколы), поэтому памят запрашивается крупными кусками - аренами
В линуксе размер арены составляет 64мб 
Когда арена получена, она нарезается на страницы по 8кб
Из страниц образуется иерархическая модель хранения данных
Страницы делятся на своеобразные блоки из нескольких страниц, которые называются спанами (span)

Собственно, такой механизм обусловлен особенностями работы планировщика
GMP модель планировщика (горутины, поток, и логический процессор с очередью горутин) предполагает обращение к арене за памятью 
К арене обращается тред операционной системы 
У каждой M есть кэш, и запрос сначала отправляет туда
Если в кеше нужных данных нет, то планировщик идет в арену
Но, арена одна, а потоков много, поэтому возникает contention (конкуренция за доступ к арене)
Если и на арене нет места, то тогда производится syscall чтобы выделить новую арену 

В go есть "предказумая фрагментация" - память выделяется в зависимости от класса объекта (к примеру, 1 класс - от 1 до 8 байт)

Для того, чтобы определить, где будет выделяться память - в стэке или в куче, используется escape analysis 
Если объект используется только внутри функции, то он будет помещен в стэке, т.к. это работает быстрее
В других ситуациях аллокация будет производиться в куче



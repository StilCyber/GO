Опасные операции с каналами:

/////////

Запись в ниловый канал

func writeToNilChannel() {
    var ch chan int
    ch <- 1
}

deadlock - здесь мы блокируемся на все время

/////////

Запись в закрытый канал

func writeToClosedChannel() {
    ch := make(chan int, 2)
    close(ch)
    ch <- 20
}

panic: send on closed channel

/////////

Чтене из закрытого канала

func readFromChannel() {
    ch := make(chan int, 2)
    ch <- 10
    ch <- 20

    val, ok := <-ch
    fmt.Println(val, ok)

    close(ch)

    val, ok = <-ch
    fmt.Println(val, ok)

    val, ok = <-ch
    fmt.Println(val, ok)
}

Когда канал закрыт, мы может читать значения, которые еще непрочитаны
Но если все значения прочитаны, то мы получим zero value и false

/////////

Чтение из каналов внутри селекта

func readAnyChanels() {
    ch1 := make(chan int)
    ch2 := make(chan int)

    go func() {
        ch1 <- 100
    }()

    go func() {
        ch2 <- 200
    }()

    select {
        case val1 := <-ch1:
            fmt.Println(val1)
        case val2 := <-ch2:
            fmt.Println(val2)
    }
}

Выбор канал здесь происходит рандомно 

/////////

Чтение из нилового канала

func readFromNilChannel() {
    var ch chan int
    <-ch
}

fatal error: all goroutines are asleep - deadlock!

/////////

range по ниловому каналу

func rangeNilChannel() {
    var ch chan int
    for range ch {

    }
}

fatal error: all goroutines are asleep - deadlock!

range вычитывает из канала, пока он не закрыт - а там нил

/////////

func closeNilChannel() {
    var ch chan int 
    close(ch)
}

panic: close of nil channel

/////////

Сравнение каналов

func compareChannels() {
    ch1 := make(chan int)
    ch2 := make(chan int)

    equal1 := ch1 == ch2
    equal2 := ch1 == ch1

    fmt.Println(equal1)
    fmt.Println(equal2)
}

Канал - указатель на структуру
Здесь сравниваются указатели - а они равны

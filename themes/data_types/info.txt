Общая информация о типах данных 

**********
Примитивные и составные типы данных

Примитивные:
1. Целочисленные типы
2. Вещественные числа
3. Булевы значения
4. Строки 
5. Комплексные числа

Составные:
1. Массивы и срезы
2. Карты
3. Структуры
4. Интерфейсы
5. Функции
6. Указатели
7. Каналы

Отличие примитивов от составных типов не в том, что примитив хранится в одной ячейке памяти (строки так вообще под капотом это массив байт)
Примитивы не дробятся на более мелкие части без потери смысла 
Составные типы так или иначе оперируют примитивами (к примеру, массив целых чисел)

**********
Zero value

Если мы объявим переменную без инициализации, то по дефолту ее значение составит zero value определенного типа 
Целые числа - 0
Вещественные числа - 0.0
Булевы значения - false 
Строки - пустая строка

Составные типы данных - nil 
ВАЖНО: при создании слайсов, мап и каналов при помощи функции make будет создан объект структуры, который не nil 

**********
Выравнивание (aligment) типов данных 
Это механизм размещения данных в памяти, чтобы переменная не пересекала границ машинного слова 
Для нас важнее всего выравнивание структур по самому увесистому полю - на это можно повлиять в коде,
   т.к. комплиятор не меняет порядок полей 

https://ubiklab.net/posts/go-alignment/?ysclid=m91eine1xm733362761

*************************************
Размеры типов данных
Размеры притививов фиксированы
Есть только нюанс int - при архитектуре процесса 32 он будет занимать 32 бита, 64 - соответственно 64

Размер массивов определяется простым сложением размеров его элементов: 
func main() {
	var num int
	var num1 int

	fmt.Println(unsafe.Sizeof(num + num1))

	slice := [...]int{1,2}
	fmt.Println(unsafe.Sizeof(slice))
}

Со слайсами сложнее - размер слайса составляет 24 байта 
Слайс - это объект структуры, в нем три поля 
Длина и емкость это int, указатель тоже занимает 8 байт 
Что же касается базового массива слайса - то это совсем другая история
Следовательно, размер структуры - это совокупный размер ее полей

*************************************
Endianness

Это порядок байтов в памяти компьютера 
Различают Big-endian и little-endian

Big-endian - байты располагаются от старшего к младшему (слева направо)
little-endian - байты располагаются от младшего к старшему (справа налево)

https://bodrovis.tech/posts/big_endian_i_little_endian_poryadok_sledovaniya_baytov/


*************************************
Указатели, пакет unsafe

unsafe.Sizeof(value) - возвращает размет переданных данных в байтах 

https://habr.com/ru/companies/vk/articles/776766/

https://habr.com/ru/companies/otus/articles/862854/

https://translated.turbopages.org/proxy_u/en-ru.ru.4de5bd1c-67f5f25f-8e64d2da-74722d776562/https/stackoverflow.com/questions/32700999/pointer-arithmetic-in-go

https://golang-blog.blogspot.com/2019/02/go-faq-pointer-arithmetic.html?ysclid=m99eypxmv6452477505
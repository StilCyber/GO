Функция - то, чем вы уже пользуетесь постоянно
Если говорить просто, то функция - это кусок кода, которому вы скармливаете данные и он вам что-то выплевывает 

Вспомним пример с мариночкой. Там описана отдельная функция, которая принимает число типа int и возвращает тоже int 

////////////////

func countLetters(num int) int {
	result := 0

	for i := 0; i <= num; i++ {
		result += i
	}

	return result
}

////////////////

При работе с функцией ее нужно, во-первых, создать, и во-вторых, вызвать 

Создание функции начинается с ключевого слова func 
Затем придумываете имя функции и в круглых скобках перечисляете параметры 
Параметры указываются вместе с их типами 
В нашем случае функция countLetters имеет в качестве параметра num типа int 
Здесь мы не заморачиваем голову с типами, и в том числе потому, что при создании переменной i в цикле она по дефолту создается как int
Собственно, что делает функция - она возвращает сумму числе num, если оно больше нуля, либо возвращает ноль
Для возврата значения из функции используется оператор return 
return, кстати, не обязательно должен идти в конце тела функции - к примеру, где-то в середине может быть if, внутри которого может быть return 

После указания аргументов перечисляются типы возвращаемых значений
Особенностью go является то, что возвращаться может несколько значений сразу 
В этом случае возвращаемые значения берутся в скобки


Также нужно обратить внимание, что возвращаемые значения можно именовать:

////////////////

func countLetters(num int) (sum int) {
	sum = 0

	for i := 0; i <= num; i++ {
		sum += i
	}

	return sum
}

////////////////

Здесь переменная sum создается при объявлении возвращаемых значений
Такой подход вполне применим, что проще просто указывать типы возвращаемых значений

При работе с функциями нужно не только функцию создать, но и... не забыть вызвать ее
Происходит это достаточно просто - имя функции и в скобках передаваемые значения

Ах да, функция создается с параметрами, и вызывается с аргументами. Не путайте 

Если мы хотим использовать возвращаемое значение, то нужно присвоить его переменной 

Сейчас стоит сказать, что некоторые функции прописываются с заглавной буквы
fmt.Println()
Функция Println() вызывается из другого пакета
В рамках пакетов есть два вида функций:
1. Приватный функции (доступны только внутри пакета)
2. Публичные функции (отдаются наружу)

Если функция написана с большой буквы - значит, ее можно использовать в другом пакете 
Снова заглянем в будущее и используем слайс

////////////////

var lovers = []string{"Генерал Кастер", "Сальвадор Дали"}

func main() {
	listingLovers()
	
}

func listingLovers() {
	for _, value := range lovers {
		fmt.Println(value)
	}
}

////////////////

Как видим, функция успешно использует переменную, которую ей не передавали
Получает она ее благодаря механизму замыкания
Есть такое понятие, как область видимости
Когда мы объявляете переменную, она доступна далеко не везде
Следует различать глобальную область видимости, функциональную и блочную
Глобальная область видимости - это переменная lovers, она доступна везде в рамках пакета 
Функциональная область видимости - мы создаем переменную внутри функции, и она существует только там
Блочная область видимости - внутри блоков кода - for, if else, switch (в go это переменная, объявленная при создании цикла)

Замыкания в функции - это когда вы приходите к другу, у вас ничего нет, и вы шаритесь по местному холодильнику 

На собесах когда хотят что-то про это узнать, обычно имеют в виду узкий кейс:
Замыкание - это когда функция a возвращает функцию b, которая имеет доступ к переменным из тела функции a
К этой теме мы потом еще вернемся
Циклы

В go есть только один цикл - это цикл for 
В базовом варианте цикл for представляет собой условие плюс счетчик 

////////////////

func main() {
	children := 0

	for i := 0; i < 3; i++ {
		fmt.Printf("Сейчас детей: %v\n", children)
		fmt.Println("Нужно родить еще")
		children++
	 }
	 
	 if children == 3 {
		fmt.Printf("Сейчас детей: %v\n", children)
		fmt.Println("Льгота получена")
	 } else {
		fmt.Println("Что-то... что-то пошло не так")
	 }
}

////////////////

В этом примере женщина хочет не работать и получать льготы. Разберем подробней
i := 0 - объявление и инициализация переменной-счетчика.
         В принципе эту переменную можно объявить и в другом месте, но удобней это делать при задании самого цикла
i < 3 - условие для продолжение цикла
i++ - увеличение счетчика на единицу

При каждой итерации счетчик будет увеличиваться на единицу

fmt.Printf("Сейчас детей: %v\n", children) - новая для нас функция, она используется на вывода текста и значений переменных
    модификатор %v - означает значение (value), в данном случае выводится значение переменной children

В других языках предусмотрен еще и цикл while, но в go он реализуется через синтаксис for

Ситуация следующая. Женщина захотела выйти замуж чтобы обнулиться. 
Поскольку этот вопрос для нее принципиально важен,
она хочет, чтобы хотя бы в день свадьбы число ее любовников составляло 0 человек
На вход подается число любовников, и до тех пор пока оно больше нуля, мы его декрементируем
На всякий случай поставим проверку при выводе финальной информации

////////////////

   var lovers uint

	fmt.Println("Введите количество любовников")
	fmt.Scan(&lovers)

	for lovers > 0 {
		fmt.Printf("Текущее число любовников: %v\n", lovers)
		lovers--
	}

	if lovers == 0 {
		fmt.Printf("Текущее число любовников: 0\n")
		fmt.Println("Пора обнуляться")
	} else {
		fmt.Println("Что-то снова пошло не так...")
	}

////////////////

Различия между for и for как while становятся очевидными при более сложных действиях - к примеру, 
     когда нужно будет не декрементировать, а удалять элементы из слайса, но это чуть позже 